/////////////// Code Use For Fragment or Activity

 private fun productslider() {

        val gson = GsonBuilder().setLenient().create()
        val client = OkHttpClient()

        val retrofit = Retrofit.Builder()
                .baseUrl(Constant.BASE_URL)
                .client(client)
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build()
        val apiservice = retrofit.create(Api::class.java)

        val call = apiservice.productSlider(productId!!)
        call.enqueue(object : Callback<ProductSliderModel> {
            override fun onResponse(call: Call<ProductSliderModel>, response: Response<ProductSliderModel>) {
                if (response.body() != null && response.isSuccessful()) {

                    // Slider Start
                    val viewPagerAdapter = SingleProductViewPagerAdapter(activity!!, response.body()?.data)
                    Single_Product_viewPager.clipToPadding = false
                    Single_Product_viewPager.setPadding(60, 0, 60, 0)
                    Single_Product_viewPager.pageMargin = 8
                    Single_Product_viewPager.adapter = viewPagerAdapter
                    //Slider Over

                    countDownTimer = object : CountDownTimer(3000, 2999) {
                        override fun onTick(millisUntilFinished: Long) {

                            var index = Single_Product_viewPager.currentItem + 1
                            if (index >= response.body()?.data!!.size) {
                                index = 0
                            }
                            Single_Product_viewPager.currentItem = index
                        }

                        override fun onFinish() {
                            countDownTimer?.start()
                        }
                    }
                    countDownTimer?.start()

                }
            }

            override fun onFailure(call: Call<ProductSliderModel>, t: Throwable) {
                Toast.makeText(activity, "Check Internet connection", Toast.LENGTH_SHORT).show()
            }
        })


    }
//////// End Code


////////////Code Use in Adapter Page


class ViewPagerAdapter(private val context: Context, val SliderImages: List<SliderResponse>?) : PagerAdapter() {

    private var layoutInflater: LayoutInflater? = null
    //private val images = arrayOf(R.drawable.banner, R.drawable.fashion, R.drawable.kids)


    override fun isViewFromObject(view: View, `object`: Any): Boolean {
        return view == `object`
    }

    override fun getCount(): Int {
        return SliderImages!!.size
    }

    override fun instantiateItem(container: ViewGroup, position: Int): Any {
        layoutInflater = context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater?
        val view = layoutInflater?.inflate(R.layout.viewpager_home_slider, null)
        //val imageView = view?.findViewById(R.id.imageView_viewPager_banner) as ImageView
        //view?.imageView_viewPager_banner?.setImageResource(images[position])
        Glide.with(context)
                .load(SliderImages!![position].image)
                .apply(RequestOptions()
                        .placeholder(R.drawable.product))
                .into(view?.imageView_viewPager_banner!!)

        val vp = container as ViewPager
        vp.addView(view, 0)
        return view!!

    }

    override fun destroyItem(container: ViewGroup, position: Int, `object`: Any) {
        val vp = container as ViewPager
        val view = `object` as View
        vp.removeView(view)
    }
}
/////END Adapter Page Coding